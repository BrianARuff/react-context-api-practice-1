{"version":3,"sources":["Movie.js","MovieContext.js","AddMovie.js","MovieList.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["Movie","props","style","fontWeight","name","price","MovieContext","createContext","MovieProvider","useState","id","movies","setMovies","Provider","value","children","AddMovie","useContext","setName","setPrice","border","margin","height","width","onChange","e","target","type","background","color","borderRadius","onClick","newMovie","Math","random","Date","now","MovieList","display","justifyContent","alignItems","alignContent","flexDirection","flexWrap","map","movie","index","listStyle","key","Nav","alignSelf","padding","fontSize","length","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90d6c24a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Movie = props => {\n  return (\n    <div>\n      <h4 style={{ fontWeight: \"bolder\" }}>{props.name}</h4>\n      <p style={{ fontWeight: \"lighter\" }}>{props.price}</p>\n    </div>\n  );\n};\n\nexport default Movie;\n","import React, { useState, createContext } from \"react\";\n\nexport const MovieContext = createContext();\n\nexport const MovieProvider = props => {\n  const [movies, setMovies] = useState([\n    { name: \"Harry Potter and the Goblet of Fire\", price: \"$20.00\", id: 0 },\n    { name: \"The Terminator Part III\", price: \"$5.00\", id: 1 },\n    { name: \"The Dead Poets Society\", price: \"$2.50\", id: 2 }\n  ]);\n  return (\n    <MovieContext.Provider value={[movies, setMovies]}>\n      {props.children}\n    </MovieContext.Provider>\n  );\n};\n","import React, { useContext, useState } from \"react\";\nimport { MovieContext } from \"./MovieContext\";\n\nconst AddMovie = () => {\n  const [movies, setMovies] = useContext(MovieContext);\n\n  let [name, setName] = useState(\"\");\n  let [price, setPrice] = useState(\"\");\n\n  const handleSetName = e => {\n    setName(e.target.value);\n  };\n  const handleSetPrice = e => {\n    setPrice(e.target.value);\n  };\n\n  const addMovie = () => {\n    const newMovie = { name, price, id: Math.random() * 1000 * Date.now() };\n    setMovies([...movies, newMovie]);\n  };\n\n  return (\n    <div>\n      <div>\n        <label>Movie Name</label><br/>\n        <input\n          style={{ border: \"1px solid black\", margin: \"20px 0\", height: \"30px\", width: \"100%\" }}\n          name=\"name\"\n          onChange={handleSetName}\n          type=\"text\"\n        />\n      </div>\n      <div>\n        <label>Price</label> <br/>\n        <input style={{ border: \"1px solid black\", margin: \"20px 0\", height: \"30px\", width: \"100%\" }} name=\"price\" onChange={handleSetPrice} type=\"text\" />\n      </div>\n      <button style={{border: \"1px solid red\", background: \"red\", color: \"black\", fontWeight: \"bold\", width: \"100%\", height: \"30px\", borderRadius: \"4px\"}} onClick={addMovie}>Add Movie</button>\n    </div>\n  );\n};\n\nexport default AddMovie;\n","import React, { useContext } from \"react\";\nimport Movie from \"./Movie.js\";\nimport { MovieContext } from \"./MovieContext\";\nimport AddMovie from \"./AddMovie\";\n\nconst MovieList = () => {\n  const [movies, setMovies] = useContext(MovieContext);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        alignContent: \"center\",\n        flexDirection: \"column\",\n        width: \"100%\"\n      }}\n    >\n      <h2>My Movies!!</h2>\n      <ul\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignContent: \"center\",\n          alignItems: \"center\",\n          flexWrap: \"wrap\",\n          width: \"100%\"\n        }}\n      >\n        {movies.map((movie, index) => (\n          <li\n            style={{\n              listStyle: \"none\",\n              margin: \"20px\"\n            }}\n            key={movie.id}\n          >\n            {<Movie {...movie} index={index} setMovies={setMovies} />}\n          </li>\n        ))}\n      </ul>\n      <AddMovie />\n    </div>\n  );\n};\n\nexport default MovieList;\n","import React, { useContext } from \"react\";\nimport { MovieContext } from \"./MovieContext.js\";\n\nconst Nav = props => {\n  const [movies] = useContext(MovieContext);\n\n  return (\n    <div\n      style={{\n        background: \"black\",\n        color: \"#fff\",\n        width: \"100%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignContent: \"center\",\n        alignItems: \"center\"\n      }}\n    >\n      <h1 style={{ fontWeight: \"bolder\", alignSelf: \"center\" }}>\n        My Movies Count:{\" \"}\n      </h1>\n      <p\n        style={{ padding: \"0 1.6rem\", fontSize: \"32px\", fontWeight: \"bolder\" }}\n      >\n        {movies.length}\n      </p>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\nimport MovieList from \"./MovieList\";\nimport Nav from \"./Nav\";\nimport { MovieProvider } from \"./MovieContext.js\";\n\nfunction App() {\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\"\n      }}\n    >\n      <MovieProvider>\n        <Nav />\n        <MovieList />\n      </MovieProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}